[
    {
        "id": "8b12673962896a41",
        "type": "tab",
        "label": "HTTP",
        "disabled": false,
        "info": "Dois fluxos simples que mostram o funcionamento \r\ndos nós http_in e http_response. Neles são \r\nutilizados os nós:\r\n - http_in;\r\n - debug;\r\n - function;\r\n - template; e\r\n - http_response.",
        "env": []
    },
    {
        "id": "ef2ecb0954ca4ec5",
        "type": "http in",
        "z": "8b12673962896a41",
        "name": "",
        "url": "/dados",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "9278aaf2c8992dd4",
                "ff823003ec806a6b"
            ]
        ]
    },
    {
        "id": "9278aaf2c8992dd4",
        "type": "debug",
        "z": "8b12673962896a41",
        "name": "Dados",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "79599d1db964eb59",
        "type": "http response",
        "z": "8b12673962896a41",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 120,
        "wires": []
    },
    {
        "id": "ff823003ec806a6b",
        "type": "function",
        "z": "8b12673962896a41",
        "name": "Resposta",
        "func": "msg.payload = \"<html><body>\" \n        + \"<h1>Dados recebidos</h1>\"\n        + \"</body></html>\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 120,
        "wires": [
            [
                "79599d1db964eb59"
            ]
        ]
    },
    {
        "id": "534dd46daeccaff8",
        "type": "http in",
        "z": "8b12673962896a41",
        "name": "",
        "url": "/frase",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "d47d2fc99dd03397"
            ]
        ]
    },
    {
        "id": "d47d2fc99dd03397",
        "type": "function",
        "z": "8b12673962896a41",
        "name": "Frases",
        "func": "let frase = context.get(\"frases\");\nmsg.id = Math.floor(Math.random()*10)\nmsg.payload = frase[String(msg.id)];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nlet frases = {\n    \"0\": \"A picture is worth a thousand words\",\n    \"1\": \"Better late than never\",\n    \"2\": \"Break the ice\",\n    \"3\": \"Actions speak louder than words\",\n    \"4\": \"The early bird catches the worm\",\n    \"5\": \"Every cloud has a silver lining\",\n    \"6\": \"When in Rome, do as the Romans do\",\n    \"7\": \"You can't have your cake and eat it too\",\n    \"8\": \"Spill the beans\",\n    \"9\": \"Hit the nail on the head\"\n};\ncontext.set(\"frases\", frases);",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 200,
        "wires": [
            [
                "64e7169f3e51c075"
            ]
        ]
    },
    {
        "id": "aeea5c5b68f269de",
        "type": "http response",
        "z": "8b12673962896a41",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "64e7169f3e51c075",
        "type": "template",
        "z": "8b12673962896a41",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <title>Sua frase #{{id}}</title>\n    </head>\n    <body>\n        <h1>{{payload}}!</h1>\n    </body>\n</html>",
        "output": "str",
        "x": 460,
        "y": 200,
        "wires": [
            [
                "aeea5c5b68f269de"
            ]
        ]
    },
    {
        "id": "a8555ab25589016a",
        "type": "comment",
        "z": "8b12673962896a41",
        "name": "http in e post",
        "info": "O nó http_in funciona como um endpoint HTTP \ne recebe pedidos na URL http://localhost:1880/dados, \natendendo o método POST. \n\nOs dados enviados pelo cliente são exibidos \npelo nó debug ‘Dados’. \n\nO nó function prepara uma confirmação HTML \ndo recebimento, retornada cliente por meio \ndo nó http response.",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "eb53401a8b1faccc",
        "type": "comment",
        "z": "8b12673962896a41",
        "name": "http in e get",
        "info": "O nó http_in funciona como um endpoint HTTP \ne recebe pedidos na URL http://localhost:1880/frases, \natendendo o método GET. \n\nA cada pedido, o nó function sorteia uma \nfrase, enviando-a como payload, juntamente \nde seu id, para o nó template, que insere \nestes dados no modelo de resposta HTML \ndefinido no próprio nó, que é envada pelo \nnó http response.",
        "x": 130,
        "y": 160,
        "wires": []
    }
]